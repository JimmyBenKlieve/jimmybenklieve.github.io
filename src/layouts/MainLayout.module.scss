@import 'node_modules/mathsass/dist/math';
@import '../variables';

.page {
  position: relative;
  display: flex;
  flex-flow: row nowrap;
  width: 100%;
  height: 100%;
  line-height: 1;
  overflow-x: hidden;
  overflow-y: auto;
  font-family: 'Oswald', sans-serif;
}

.content {
  line-height: 1;
  font-size: 16px;
}

.topWall {
  z-index: 10;
  position: absolute;
  left: 0;
  top: $topOffset;
  padding: 6px 12px;
  width: $topWallWidth;
  height: $topWallHeight + 4;
  font-family: 'Bebas Neue', sans-serif;
  color: rgba($textColor, 0.1);
  transform: rotate(-$skewDeg) skewX($skewDeg) translateY( -$topWallHeight / 2 - 4);
  transform-origin: left top;
  user-select: none;
  background-color: $faceColor0;

  .nav {
    line-height: 1;
    font-size: 48px;
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;

    > h1 {
      margin: 0;
      margin-left: 12px;
      font-size: 24px;
    }

    .navlist {
      display: flex;
      list-style: none;
      margin: 0;
      margin-top: 6px;
      padding: 0;
      width: 100%;
      outline: 0;

      li {
        flex: 0 0 auto;
      }

      li.navitem {
        margin: 0 -12px;
        margin-right: 12px;

        &:first-child {
          margin-left: 0;
        }

        &:last-child {
          margin-right: 0;
        }

        a {
          display: block;
          padding: 6px 12px;
          color: transparent;
          text-decoration: none;
          transition: all 140ms ease-out;
          text-shadow: 0 0 0 lighten($textColor, 10%);
          outline: 0;
          cursor: pointer;

          &:hover,
          &:focus {
            background-color: darken($backgroundColor, 5%);
            text-shadow: 8px -8px 0 lighten($textColor, 25%), 0 0 0 rgba($textColor, 0.25);
          }
        }

        &.active {
          a {
            text-shadow: 4px -4px 0 $accentColor, 0 0 0 rgba($accentColor, 0.25) !important;
          }
        }
      }

      li.whitespace {
        width: 1.5em;
      }
    }
  }
}

.leftWall {
  z-index: 1;
  position: relative;
  overflow: hidden;
  flex: 0 0 auto;
  width: $leftOffset;
  height: 100%;
  cursor: default;
  user-select: none;

  .clock {
    position: absolute;
    top: $topOffset + $leftOffset * tan($skewDeg);
    right: 0;
    font-family: 'Bebas Neue', sans-serif;
    font-size: 64px;
    line-height: 0.75;
    text-align: right;
    white-space: nowrap;
    color: rgba($textColor, 0.5);
    transform: translateX(0.05em) rotate(-90deg) skewX(-$skewDeg) scale(1, 1.5);
    transform-origin: right bottom;
  }

  &::after {
    content: '';
    z-index: -1;
    position: absolute;
    bottom: 0;
    right: 0;
    width: 100%;
    height: 100%;
    background-color: $faceColor3;
    transform: translateY($topOffset) skewY($skewDeg);
    transform-origin: 0 top;
  }
}

.rightWall {
  z-index: 2;
  position: relative;
  overflow: hidden;
  flex: 1 1 auto;
  height: 100%;

  .contentWrapper {
    font-size: 24px;
    text-shadow: 1px 2px 0 rgba($textColor, 0.15);
    height: 100%;
    overflow: hidden;
  }

  &::before {
    content: '';
    position: absolute;
    z-index: -1;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    background-color: $faceColor2;
    transform: translateY($topOffset) skewY(-$skewDeg);
    transform-origin: right top;
  }

  &::after {
    content: '';
    z-index: -1;
    position: absolute;
    right: 0;
    top: 0;
    width: 100%;
    height: 100vw;
    background-color: $faceColor2;
    transform: translateY($topOffset) skewY(-$skewDeg);
    transform-origin: $leftOffset top;
  }
}

:global(.theme-dark) {
  .topWall {
    background-color: $faceColorDark0;

    .nav .navlist li.navitem {
      a {
        text-shadow: 0 0 0 darken($textColorDark, 10%);

        &:hover,
        &:focus {
          background-color: lighten($backgroundColorDark, 5%);
          text-shadow: 8px -8px 0 darken($textColorDark, 25%), 0 0 0 rgba($textColorDark, 0.25);
        }
      }
    }
  }

  .leftWall {
    .clock {
      color: rgba($textColor, .5);
    }

    &::after {
      background-color: $faceColorDark3;
    }
  }

  .rightWall {
    &::before,
    &::after {
      background-color: $faceColorDark2;
    }
  }
}
